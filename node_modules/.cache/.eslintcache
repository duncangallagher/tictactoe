[{"/Users/duncan/Documents/react-tutorials/tic-tac-toe/tic-tac-toe/src/index.js":"1","/Users/duncan/Documents/repos/tictactoe/src/index.js":"2"},{"size":4572,"mtime":1642446032335,"results":"3","hashOfConfig":"4"},{"size":4572,"mtime":1642446032335,"results":"5","hashOfConfig":"6"},{"filePath":"7","messages":"8","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"9"},"vscjzu",{"filePath":"10","messages":"11","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"9"},"1dumvv1","/Users/duncan/Documents/react-tutorials/tic-tac-toe/tic-tac-toe/src/index.js",["12","13","14","15","16","17"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Square(props) {\n    return (\n        <button className={props.className} onClick={props.onClick}>\n            {props.value}\n        </button>\n    );\n}\n\nfunction Reset(props) {\n    return (\n        <button className={props.className} onClick={props.onClick}>\n            {props.value}\n        </button>\n    );\n}\n\nclass Board extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.getInitialState = function () {\n            let initial_state =  {\n                squares: Array(9).fill(null),\n                xIsNext: true,\n                turnCounter: 0,\n                winner: null,\n                winningSquares: Array(3).fill(null)\n            }\n            return initial_state;\n        };\n\n        this.state = this.getInitialState();\n    }\n\n    handleClick(i) {\n        this.state.turnCounter++;\n        const squares = this.state.squares.slice();\n        // return early if the game is over or same square is clicked\n        if (calculateWinner(squares) || squares[i]) {\n            return;\n        }\n        // if 9 turns are reached and no winner, declare draw\n        if (this.state.turnCounter == 9 && !(calculateWinner(squares))) {\n            this.state.winner = 'none';\n        }\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\n        this.setState({\n            squares: squares,\n            xIsNext: !this.state.xIsNext,\n        });\n    }\n\n    renderSquare(i) {\n        let class_name = \"square\";\n        if ((this.state.winningSquares).includes(i)) {\n            class_name += ' winner';\n        }\n        return (\n            <Square\n                className={class_name}\n                value={this.state.squares[i]}\n                onClick={() => this.handleClick(i)}\n            />\n        );\n    }\n\n    handleReset() {\n        console.log(\"game reset\");\n        this.setState(this.getInitialState());\n    }\n\n    renderReset() {\n        let class_name = \"reset-button\";\n        let reset_text = \"Reset\"\n        if (this.state.winner) {\n            return (\n                <Reset\n                    className={class_name}\n                    value={reset_text}\n                    onClick={() => this.handleReset()}\n                />\n            );\n        }\n    }\n\n    render() {\n        const winning_squares = calculateWinner(this.state.squares);\n        let title = 'Tic-Tac-Toe';\n        let status;\n        if (winning_squares) {\n            let winner = this.state.squares[winning_squares[0]];\n            status = winner + ' wins!';\n            this.state.winner = winner;\n            this.state.winningSquares = winning_squares;\n        } else if (this.state.winner == 'none') {\n            status = 'Draw!';\n        }\n        else {\n            status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n        }\n        return (\n            <div>\n                <div className=\"title\">{title}</div>\n                <div className=\"board-row\">\n                    {this.renderSquare(0)}\n                    {this.renderSquare(1)}\n                    {this.renderSquare(2)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(3)}\n                    {this.renderSquare(4)}\n                    {this.renderSquare(5)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(6)}\n                    {this.renderSquare(7)}\n                    {this.renderSquare(8)}\n                </div>\n                <div className=\"status\">{status}</div>\n                <div className=\"reset\">{this.renderReset()}</div>\n            </div>\n        );\n    }\n}\n\nclass Game extends React.Component {\n    render() {\n        return (\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <Board />\n                </div>\n            </div>\n        );\n    }\n}\n\n// ========================================\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n\nfunction calculateWinner(squares) {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            const winning_squares = lines[i];\n            return winning_squares;\n        }\n    }\n    return null;\n}","/Users/duncan/Documents/repos/tictactoe/src/index.js",["18","19","20","21","22","23"],{"ruleId":"24","severity":1,"message":"25","line":40,"column":9,"nodeType":"26","messageId":"27","endLine":40,"endColumn":19},{"ruleId":"28","severity":1,"message":"29","line":47,"column":36,"nodeType":"30","messageId":"31","endLine":47,"endColumn":38},{"ruleId":"24","severity":1,"message":"25","line":48,"column":13,"nodeType":"26","messageId":"27","endLine":48,"endColumn":23},{"ruleId":"24","severity":1,"message":"25","line":97,"column":13,"nodeType":"26","messageId":"27","endLine":97,"endColumn":23},{"ruleId":"24","severity":1,"message":"25","line":98,"column":13,"nodeType":"26","messageId":"27","endLine":98,"endColumn":23},{"ruleId":"28","severity":1,"message":"29","line":99,"column":38,"nodeType":"30","messageId":"31","endLine":99,"endColumn":40},{"ruleId":"24","severity":1,"message":"25","line":40,"column":9,"nodeType":"26","messageId":"27","endLine":40,"endColumn":19},{"ruleId":"28","severity":1,"message":"29","line":47,"column":36,"nodeType":"30","messageId":"31","endLine":47,"endColumn":38},{"ruleId":"24","severity":1,"message":"25","line":48,"column":13,"nodeType":"26","messageId":"27","endLine":48,"endColumn":23},{"ruleId":"24","severity":1,"message":"25","line":97,"column":13,"nodeType":"26","messageId":"27","endLine":97,"endColumn":23},{"ruleId":"24","severity":1,"message":"25","line":98,"column":13,"nodeType":"26","messageId":"27","endLine":98,"endColumn":23},{"ruleId":"28","severity":1,"message":"29","line":99,"column":38,"nodeType":"30","messageId":"31","endLine":99,"endColumn":40},"react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","noDirectMutation","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected"]